{
	"info": {
		"_postman_id": "c2d098db-6000-4ea5-9651-c4b36c7c9664",
		"name": "ReqResCollection",
		"description": "This is public API from reqres.in.\n\nHere, I am using this for learning and testing purpose.\n\nIt is an attempt for pure education purpose.\n\nThank you",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17172245"
	},
	"item": [
		{
			"name": "getRequests",
			"item": [
				{
					"name": "getRequestForOnePage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" let jsonRes=pm.response.json()\r",
									"\r",
									"pm.test(\"Response code is as expected.\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"Verifying id of first in array of object.\",\r",
									"()=>{\r",
									"    pm.expect(jsonRes.data[0].id).to.be.above(0);\r",
									"})\r",
									"\r",
									"pm.test(\"page number verification.\",\r",
									"()=>{\r",
									"    pm.expect((jsonRes.page)==(pm.collectionVariables.get(\"pageNo\")));\r",
									"})\r",
									"\r",
									"pm.test(\"objects in data array.\", ()=>{\r",
									"    pm.expect(jsonRes.data[jsonRes.per_page-1].id)\r",
									"    .eqls((pm.collectionVariables.get(\"pageNo\")*jsonRes.per_page))\r",
									"})\r",
									"\r",
									"pm.test(\"verify array\",()=>{\r",
									"    pm.expect(jsonRes.data).to.be.an(\"array\").to.be.not.empty\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/users?page={{pageNo}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getRequestForSingleUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code, Status message and Response format verification\",\r",
									"()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.be.ok\r",
									"    pm.response.to.be.json\r",
									"    pm.expect(pm.response.responseTime).to.below(100)\r",
									"})\r",
									"\r",
									"pm.test(\"Individual details is not an array\",\r",
									"()=>{\r",
									"    pm.expect(jsonRes.data).to.be.not.an(\"array\")\r",
									"})\r",
									"\r",
									"pm.test(\"text message for donation\", ()=>{\r",
									"    pm.expect(jsonRes).to.have.property(\"support\");\r",
									"});\r",
									"pm.test(\"verifying content type\",()=>{\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).contains(\"application/json\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getRequestForNonExistingUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonRes=pm.response.json();\r",
									"pm.test(\"Status code, Status meassage and Response format verification\", ()=>{\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.response.to.be.notFound\r",
									"    pm.response.to.be.json\r",
									"})\r",
									"\r",
									"pm.test(\"Empty response for non existing user\",()=>{\r",
									"    pm.expect(jsonRes).to.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"Verifying content type\",()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).contain(\"application/json\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/users/?id=23",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "23"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "In this folder only get requests are maintained."
		},
		{
			"name": "PostRequests",
			"item": [
				{
					"name": "postRequestForCreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonRes=pm.response.json();\r",
									"\r",
									"pm.test(\"Status code, Status message and Response format verification\", ()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time verification\",()=>{\r",
									"    pm.expect(pm.response.responseTime).below(1100);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response size in bytes\",()=>{\r",
									"pm.expect(pm.response.size.length).below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header verification Content Type\",()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).contain(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Rajkumar\",\r\n    \"job\":\"Star\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "Post requests for reqres.in API are documented here."
		},
		{
			"name": "updateRequests",
			"item": [
				{
					"name": "updatingParticularUserDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonRes=pm.response.json();\r",
									"let moment =require(\"moment\");\r",
									"\r",
									"pm.test(\"Status code, Status message and Response format\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.be.ok;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying update details\", ()=>{\r",
									"    pm.expect(jsonRes).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonRes.updatedAt).contain(moment().format(\"YYYY-MM-DD\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatingParticularFieldDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying patch function\",()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"no one\",\r\n   \"job\": \"Anonymous\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "deleteRequests",
			"item": [
				{
					"name": "deletingUserDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying delete function\",()=>{\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "null",
			"type": "string"
		},
		{
			"key": "pageNo",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "null",
			"type": "string"
		}
	]
}